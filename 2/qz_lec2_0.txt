[1]

как запустить javaскрипт из адресной строки браузера	<script>alert("обернуть")</script>

функция для экранирования пользовательского ввода	from markupsafe import escape

экранируем ввод пользвователя	escape(input_); @app.route('<path:input_>')  def get_file(file):  return f"{escape(file)}")

что делает url_for если мы внутри скрипта меняем полученную от пользователя переменную	изменяет ссылку согласно шаблону в @app.route

как url_for выводит новые переменные в адресную строку	первая переменная отеделяется через /?, следующие - между собой через%; url_for("func_name",prev_data=42, new1="new", new2=43) = '/from_route/42/?new1=new&new2=43'

что ложим в url_for('static' filename=?) и зачем это делать	ложим адрес файла, чтобы шаблонизатор избавил нас от сложности указывания адреса дополнительного файла(н. css, медиа);

как реализованы POST и GET в Flask	создаётся объект request; from flask import request

как получить дополнительные аргументы из request#Flask	request.args.get("name")

почему к request.args лучше обращаться через get 	это словарь, get избежит ошибок отсутствия ключа

особенность POST с точки зрения скрипта(2)	вывод не отражается в адресной строке; может передать больше данных;

реализация post в шаблоне(форма?)	 <form action="/submit" method= "post"> <input type="text" name="data_here"> <input type="submit"> Send! </form>

что делает action="/submit" в <form>	это адрес ссылку куда отправится контент полей формы после нажатия <input type="submit">

оформление декоратора для /submit	@app.route("/submit",methods=['GET','POST'])  def submit():  return ""


Для чего в целом нужен http-метод GET 	получить страницу с сервера

для чего в целом нужен http-метод POST 	отправить что-то на сервер

[2]

как в flask получить метод полученного запроса	 from flask import request  request.method

как получить данные из <form>	name = request.form.get("name_of_html_input")

альтернативные записи @app.route("/submit, methods =[ 'POST','GET']")	@app.get('/submit') @app.post('/submit');

чем @app.post, @app.get лучше чем @app.route('/submit' methods['GET','GET'])	инкапсулированная валидация ввода

загрузка файла на сервер, со стороны шаблона	<form method=post enctype =mutipart/form-data> <input type=file name=file> <input type=submit></form>

что делает from werkzeug.utils import secure_filename	возвращает безопасное для всех платформ имя файла из строки("my hot stuff.mov" -> my_hot_stuff.mov)

что делает from pathlib import PurePath	фасад, кросс-платформенный путь к файлу(win,posx)

загрузка файла на сервер, со стороны скрипта	@app.post("/upload")
def upload():
  file=request.files.get('file')
  file_name=secure_filename(file.filename)
  file.save(PurePath.joinpath(Path.cwd(),'uploads',file_name))
  return render_template('uploads.html')

разворачиваем логирование ошибок 	import logging  logger= logging.getLogger(__name__)

декоратор для обработки http-ошибок	@app.error_handler(404)  def err404(nfo):  logger.warning(nfo)  return render_template('404.html')

как мы вызываем ошибку сами	from flask import abort

реализация в скрипте сокрытия данных/ обработка нулевой выборки	@app.route("/blog/<int:id>")  def get_blog_by_id(id):  result=get_blog_(id)  if result is None: abort(404) # это return; дальше - логика если result не None


реализация перенаправления в скрипте	from flask import redirect  @app.route('/redirect/<name>')  def redirect_to(name):  return redirect(url_for('hello_func',name_arg=name))

синтаксис фидбэка flash	from flask import flash  @app.post("/form")  def form():  flash('Форма успешно отправлена','success')  return redirect(url_for('form'))


синтаксис секретного ключа 	import secrets  secrets.token_hex()

[3]

аргументы flash()	текст сообщения, категория сообщения

примеры категрий flash(2)	message, info, error, warning

реализация cookie в flask	from flask import make_response

устанавливаем cookie	  @app.route('/')  def index():  response= make_response()  response.set_cookie('key_cookie',value='')  return response