[1] 

особенность фласк	минимальный базовый функционал, с надстройками

предусловия flask- werkzeug	интерфейс для развёртывания веб-приложений и их взаимодействия с серверами разработки.

функции werkzeug(4)	роутинг, обработка запросов и ответов, дебаг, перезагрузка

предусловия flask- jinja2	язык и движок шаблонов, по образу django

предусловия flask- Click	интерфейс разработчика, добавляет команды консоли

предусловия flask- MarkupSafe, isDangerous	отвечает за безопасность

дебют приложения flask(2 строки)	from flask import Flask; app = Flask(__main__)

указываем с какого пути запускать приложение(декоратор)	@app.route("/")

где смотреть адрес сервера 	после запуска в пометке

ошибка 500, сленг	у кого-то из программистов кривые руки

числа как возврат?	нельзя, не конвертируется в html

запускаем сервер из консоли	flask --app <path> run <--debug>

запускаем сервер из консоли	flask --app <path> run <--debug>

дефолтное имя файла, его содержание импортируем app из файла в фасадный py файл, wsgi.py

декоратор view  @app.route("/path/")

наклонная черта в конце пути    синтаксический сахар, ставить чтобы юзер мог ввести адрес как с так и без наклонной черты

код 308	redirect, перенаправление по цепочке запросов

как называть функцию под декоратором	примерно повторить аргумент(путь http), без повторов

функция flask, подгружающая страницу from flask import render_template

как хранить файлы для render_template	в папке templates

добавляем в шаблон переменные   создаём словарь, return render_template('',**словарь)

как переменная отражается в html    {{ переменная }} с пробелами!

выделение операторов {% op %}

ветвление если(4 оп-ра) {% if condition %} value {% elif condition %} value2 {% else %} value3 {% endif %}

цикл(2 оп-ра) {% for itm in item_list %} {{ item }} {% endfor %}

обращение к значению словаря/полю экземлпляра в template a ={"1":1; "2":2} => {{ a.1 }} {{ a.2}}

типы шаблонов(2)   базовый, дочерний

синтаксис базового шаблона(2ключа) {% block _content_ %} templateContent {% endblock%}

синтаксис дочернего шаблона(3ключа) {% extends 'base.html' %} {% block content %} content_ {% endblock %}

где в блоке указывается контент по умолчанию; в самом шаблоне templates/wsgi.html

в дочернем блоке применяем контент родительского блока {{ super() }}

Расширяем базовый шаблон дочерним {% extends 'base.html' %}

перезаполняем блок родительского шаблона в дочернем после %extends% пишем текст %блока% {% block from_par %} new_content {% endblock %}

